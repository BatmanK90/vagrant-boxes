Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # docker port fowarding
  # this allows you to access docker daemon running inside the VM,
  # from your host machine.
  # the host port is set to something random (4243) to avoid
  # trouble with existing docker daemons you might have on your host.
  config.vm.network "forwarded_port", guest: 4243, host: 4243

  # fix for "stdin: is not a tty" and "ttyname: inappropriate ioctl for device"
  # https://github.com/mitchellh/vagrant/issues/1673#issuecomment-28288042
  config.ssh.shell = "bash -c 'BASH_ENV=/etc/profile exec bash'"

  # if machine fails to boot don't wait too long.
  config.vm.boot_timeout = 60

  # create a synced folder `pwd`/work -> /work
  config.vm.synced_folder "work", "/work", create: true,
    owner: "vagrant", group: "vagrant"

  # set machine name in vagrant status
  config.vm.define "docker-ansible-host" do |devops|
  end
  config.vm.provider :virtualbox do |vb|
    # set the name of box in Virtualbox GUI
    vb.name = "docker-ansible-host"
  end

  # Docker-Ready Box.
  config.vm.box = "phusion/ubuntu-14.04-amd64"

  # install puppet before provisioning with puppet (agentless mode)
  config.vm.provision :shell, :path => "../scripts/install-puppet.sh"

  # provision with puppet
  config.vm.provision :puppet do |puppet|
    puppet.module_path = "environments/production/modules"
    puppet.manifests_path = "environments/production/manifests/"
    #puppet.options = "--verbose --debug"

  end

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL
end
